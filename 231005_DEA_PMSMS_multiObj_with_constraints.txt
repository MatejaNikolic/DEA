import random
import numpy as np
from deap import algorithms, base, creator, tools

# Create a Multi-Objective Fitness class
creator.create("FitnessMulti", base.Fitness, weights=(1.0, -1.0))  # Minimize cost, maximize flux

# Create an Individual class
creator.create("Individual", list, fitness=creator.FitnessMulti)

# Define problem constants and parameters
CCu = 8.0  # EUR/kg
CPM = 4.0  # EUR/kg
CFe = 1.5  # EUR/kg
Bm = 0.35  # T
rSi = 0.025  # m (25mm)
hz = 0.0008  # m (0.8mm)
d = 0.005  # m (5mm)
rho_PM = 5000.0  # kg/m^3 (5 g/cm^3)
rho_Cu = 8000.0  # kg/m^3 (8 g/cm^3)
rho_Fe = 7650.0  # kg/m^3 (7.65 g/cm^3)
d_Cu = 0.00118  # m (1.18mm)
zs = 12

# Control variable bounds and steps
theta_min = 90.0
theta_max = 180.0
theta_step = 1.0
N_min = 10
N_max = 30
N_step = 1
b_min = 0.002  # m (2 mm)
b_max = 0.01  # m (10 mm)
b_step = 0.0005  # m (0.5 mm)
hs_min = 0.01  # m (10 mm)
hs_max = 0.03  # m (30 mm)
hs_step = 0.0005  # m (0.5 mm)
Lstck_min = 0.005  # m (5 mm)
Lstck_max = 0.02  # m (20 mm)
Lstck_step = 0.0005  # m (0.5 mm)

# Create functions to calculate cost and flux
def calculate_mass_magnet(N, theta, b, hs, Lstck):
    rR = rSi + b + hs + hz + d / 2
    mass_magnet = rho_PM * d * Lstck * np.deg2rad(theta) * rR
    return mass_magnet

def calculate_mass_wire(N, b, hs, Lstck):
    mass_wire = rho_Cu * N * zs * 2 * d_Cu * (b + 2 * d_Cu + Lstck) * d_Cu
    return mass_wire

def calculate_mass_laminations(hs, b, Lstck):
    mass_laminations = rho_Fe * hs * b * Lstck
    return mass_laminations

def objective_function_cost(N, theta, b, hs, Lstck):
    mass_magnet = calculate_mass_magnet(N, theta, b, hs, Lstck)
    mass_wire = calculate_mass_wire(N, b, hs, Lstck)
    mass_laminations = calculate_mass_laminations(hs, b, Lstck)
    cost = mass_wire * CCu + mass_magnet * CPM + mass_laminations * CFe
    return cost,

def objective_function_flux(N, theta, b, Lstck):
    flux = N * Bm * b * Lstck * 2 * np.sin(np.deg2rad(theta) / 2)
    return flux,

# Define the toolbox
toolbox = base.Toolbox()
toolbox.register("attr_float", random.uniform)
toolbox.register("attr_int", random.randint, N_min, N_max)
toolbox.register("individual", tools.initCycle, creator.Individual, (toolbox.attr_float, toolbox.attr_int), n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# Define evaluation functions
toolbox.register("evaluate_cost", objective_function_cost)
toolbox.register("evaluate_flux", objective_function_flux)

# Define constraints
def is_valid_individual(individual):
    N, theta, b, hs, Lstck = individual
    rSo = rSi + hs
    return b <= (2 * np.pi * rSo / 12) / 2 and N * d_Cu <= hs

# Define mutation and crossover operators
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=0.1, indpb=0.2)

# Create Pareto Front algorithm
def pareto_front_deap(toolbox, cxpb, mutpb, ngen, mu, lambda_):
    population = toolbox.population(n=mu)
    pareto_population = tools.sortNondominated(population, len(population), first_front_only=True)[0]

    for gen in range(ngen):
        offspring = algorithms.varAnd(pareto_population, toolbox, cxpb=cxpb, mutpb=mutpb)
        pareto_population = tools.sortNondominated(offspring + pareto_population, len(population), first_front_only=True)[0]

    return pareto_population

# Set algorithm parameters
ngen = 100  # Number of generations
mu = 50  # Number of individuals in the population
lambda_ = 100  # Number of offspring to produce in each generation
cxpb = 0.7  # Crossover probability
mutpb = 0.2  # Mutation probability

# Perform multi-objective optimization with Pareto front
pareto_front = pareto_front_deap(toolbox, cxpb, mutpb, ngen, mu, lambda_)

# Collect the cost and flux values from the Pareto front
pareto_cost = []
pareto_flux = []

for ind in pareto_front:
    cost, flux = toolbox.evaluate_cost(*ind), toolbox.evaluate_flux(*ind)
    pareto_cost.append(cost[0])
    pareto_flux.append(flux[0])

# Create a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(pareto_cost, pareto_flux, c='b', marker='o', label='Pareto Front')
plt.xlabel('Cost')
plt.ylabel('Flux')
plt.title('Pareto Front')
plt.legend()
plt.grid(True)

# Show or save the plot
plt.show()
